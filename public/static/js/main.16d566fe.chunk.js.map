{"version":3,"sources":["components/Navbar.js","components/Sidebar.js","components/Color.js","components/ColorList.js","components/ColorDetail.js","App.js","index.js"],"names":["MAX_SEARCH_RESULTS","Navbar","props","handleInputChange","event","target","name","value","preventDefault","setState","showSuggestions","hideSuggestions","handleKeyPress","searchTerm","state","matches","key","length","searchForColor","getPages","getSuggestions","hexCodes","count","indexOf","push","selectMatch","match","color","className","autoComplete","type","placeholder","aria-label","onKeyPress","this","onChange","onFocus","Component","colorMenu","Sidebar","to","map","Color","hexCode","id","hexCodeClean","replace","style","background","COLORS_QUERY","gql","ColorList","query","loading","error","data","console","log","colors","ColorDetail","client","ApolloClient","uri","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.16d566fe.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n// import SearchSuggestions from \"../SearchSuggestions/searchSuggestions\";\nimport \"./Navbar.css\";\n\nconst MAX_SEARCH_RESULTS = 21;\n\nclass Navbar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            color: null,\n            showSuggestions: false,\n            searchTerm: null,\n            matches: null,\n        }   \n    }\n\n    // Sets user search input as \"searchTerm\" in state\n    handleInputChange = (event) => {\n        const {name, value} = event.target;\n        event.preventDefault();\n\n        this.setState({\n            [name]: value,\n        }, () => {\n            if (value !== null && value !== \"\") {\n                this.showSuggestions();\n            }\n            else {\n                this.hideSuggestions();\n            }\n        });\n    }\n\n    // Conducts search when Enter key is pressed\n    handleKeyPress = (event) => {\n        let searchTerm = this.state.searchTerm;\n        let matches = this.state.matches;\n        if (event.key === \"Enter\" && searchTerm !== null && searchTerm !== \"\" && matches && matches.length > 0) {\n            event.preventDefault();\n            this.props.searchForColor(matches);\n            this.props.getPages(matches);\n        }\n    }\n\n    // Displays Search Suggestions\n    showSuggestions = () => {\n        this.setState({\n            showSuggestions: true,\n        }, () => {\n            this.getSuggestions();\n        });\n    }\n\n    // Hides Search Suggestions\n    hideSuggestions = () => {\n        this.setState({\n            showSuggestions: false,\n        });\n    }\n\n    // Gets list of hex codes that include search term\n    getSuggestions = () => {\n        let searchTerm = this.state.searchTerm;\n        let hexCodes = this.props.hexCodes;\n\n        let matches = [];\n        let count = 0;\n        if (searchTerm !== null && searchTerm !== \"\") {\n            while (matches.length < MAX_SEARCH_RESULTS && count < hexCodes.length) {\n                if (hexCodes[count].indexOf(searchTerm) > -1) {\n                    matches.push(hexCodes[count]);\n                }\n\n                count += 1;\n            }\n        }\n\n        this.setState({\n            matches: matches,\n        });\n    }\n\n    // Selects a match from Search Suggestions and hides suggestions\n    selectMatch = (match) => {\n        this.hideSuggestions();\n\n        this.setState({\n            searchTerm: match,\n        });\n    }\n\n    render() {\n        return (\n            <nav className=\"navbar navbar-dark bg-dark justify-content-between\">\n                {/* <img className=\"logo\" src={require(\"../../images/logo-symbol.svg\")} alt=\"logo\" /> */}\n                <form className=\"form-inline searchBox\">\n                    <input \n                        autoComplete=\"off\"\n                        className=\"form-control\" \n                        name=\"searchTerm\"\n                        type=\"search\" \n                        placeholder=\"Search for hex code\" \n                        aria-label=\"Search\"\n                        onKeyPress={this.handleKeyPress}\n                        onChange={this.handleInputChange}\n                        onFocus={this.showSuggestions}\n                        value={this.state.searchTerm}\n                    />\n                </form>\n\n                {/* {this.state.showSuggestions && this.state.matches && this.state.matches.length > 0 ? (\n                    <SearchSuggestions \n                        hideSuggestions={this.hideSuggestions}\n                        matches={this.state.matches}\n                        selectMatch={this.selectMatch}\n                        getColor={this.props.getColor}\n                    />\n                ) : (\n                    <></>\n                )} */}\n            </nav>\n        )\n    }\n}\n\nexport default Navbar;","import React, { Component } from \"react\";\nimport { Link } from 'react-router-dom';\nimport \"./Sidebar.css\";\n\nconst colorMenu = ['Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Purple', 'Brown', 'Gray'];\n\nclass Sidebar extends Component {\n    render() {\n        return (\n            <div className=\"sidebar\">\n                <Link \n                    className=\"btn btn-light allBtn\"\n                    to={'/'}\n                >\n                    All Colors\n                </Link>\n                <button \n                    className=\"btn btn-light randomBtn\"\n                    // onClick={this.props.getRandomColor}\n                >\n                    Random Color\n                </button>\n\n                <div className=\"colorMenu\">\n                    {colorMenu.map(color => (\n                        <div \n                            key={color}\n                            className=\"menuItem\"\n                            // onClick={this.props.getColor.bind(null, color)}\n                        >\n                            {color}\n                        </div>\n                    ))}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Sidebar;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Color.css';\n\nexport default function Color({ color: {id, hexCode }}) {\n    let hexCodeClean = hexCode.replace('#', '');\n\n    return (\n        <Link to={`/color/${hexCodeClean}`}>\n            <div className=\"color\" style={{ background: hexCode }}></div>\n            <div className=\"colorName\">{ hexCode }</div>\n        </Link>\n    )\n}","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport Color from './Color';\nimport './ColorList.css';\n\nconst COLORS_QUERY = gql`\n    {\n        colors {\n            id\n            hexCode\n        }\n    }\n`;\n\nexport class ColorList extends Component {\n    render() {\n        return (\n            <Fragment>\n                <Query query={COLORS_QUERY}>\n                    {\n                        ({loading, error, data}) => {\n                            if (loading) return <h4>Loading...</h4>;\n                            if (error) console.log(error);\n\n                            return (\n                                <div className=\"colorList\">\n                                    {\n                                        data.colors.map(color => (\n                                            <Color key={color.id} color={color} >{ color.hexCode }</Color>\n                                        ))\n                                    }\n                                </div>\n                            )\n                        }\n                    }\n                </Query>\n            </Fragment>\n        )\n    }\n}\n\nexport default ColorList;","import React, { Component } from 'react';\nimport Color from './Color';\n// import { Link } from 'react-router-dom';\n\nexport class ColorDetail extends Component {\n    render() {\n        return (\n            <div>\n                test\n            </div>\n        )\n    }\n}\n\nexport default ColorDetail;","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport Sidebar from './components/Sidebar';\nimport ColorList from './components/ColorList';\nimport ColorDetail from './components/ColorDetail';\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n\n          <Navbar />\n          <Sidebar />\n\n          <div className=\"app\">\n            <Route exact path=\"/\" component={ColorList} />\n            <Route path=\"/color/:hexCode\" component={ColorDetail} />\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}